package revo

import (
	"encoding/json"
	"math/big"
	"reflect"
	"testing"

	"github.com/shopspring/decimal"
)

func TestSearchLogsRequestFiltersTopicsIfAllNull(t *testing.T) {
	expected := `[1,2,{"addresses":["0x1","0x2"]},null,1]`
	minConfs := uint(1)
	request := &SearchLogsRequest{
		FromBlock: big.NewInt(1),
		ToBlock:   big.NewInt(2),
		Addresses: []string{"0x1", "0x2"},
		Topics: []SearchLogsTopic{
			{"0x0", "0x1"},
			{"0x2", "0x3"},
		},
		MinimumConfirmations: &minConfs,
	}

	result, err := json.Marshal(request)
	if err != nil {
		t.Fatal(err)
	}

	if string(result) != expected {
		t.Errorf(
			"error\nwant: %s\ngot: %s",
			expected,
			string(result),
		)
	}
}

func TestSearchLogsRequestGeneratesNulls(t *testing.T) {
	expected := `[1,2,{"addresses":["0x1","0x2"]},{"topics":[null,"0x3"]},1]`
	minConfs := uint(1)
	request := &SearchLogsRequest{
		FromBlock: big.NewInt(1),
		ToBlock:   big.NewInt(2),
		Addresses: []string{"0x1", "0x2"},
		Topics: []SearchLogsTopic{
			{},
			{"0x3"},
		},
		MinimumConfirmations: &minConfs,
	}

	result, err := json.Marshal(request)
	if err != nil {
		t.Fatal(err)
	}

	if string(result) != expected {
		t.Errorf(
			"error\nwant: %s\ngot: %s",
			expected,
			string(result),
		)
	}
}

func TestSearchLogsRequestFiltersTopicsIfOnlyOneNull(t *testing.T) {
	expected := `[1,2,{"addresses":["0x1","0x2"]},null,1]`
	minConfs := uint(1)
	request := &SearchLogsRequest{
		FromBlock: big.NewInt(1),
		ToBlock:   big.NewInt(2),
		Addresses: []string{"0x1", "0x2"},
		Topics: []SearchLogsTopic{
			{"0x3", "0x4"},
		},
		MinimumConfirmations: &minConfs,
	}

	result, err := json.Marshal(request)
	if err != nil {
		t.Fatal(err)
	}

	if string(result) != expected {
		t.Errorf(
			"error\nwant: %s\ngot: %s",
			expected,
			string(result),
		)
	}
}

// Test extraction of address from script with OP_SENDER
func TestGetOpSenderAddress(t *testing.T) {

	testData := DecodedRawTransactionResponse{
		Vouts: []*DecodedRawTransactionOutV{{
			ScriptPubKey: DecodedRawTransactionScriptPubKey{
				ASM: "1 81e872329e767a0487de7e970992b13b644f1f4f 6b483045022100b83ef90bc808569fb00e29a0f6209d32c1795207c95a554c091401ac8fa8ab920220694b7ec801efd2facea2026d12e8eb5de7689c637f539a620f24c6da8fff235f0121021104b7672c2e08fe321f1bfaffc3768c2777adeedb857b4313ed9d2f15fc8ce4 OP_SENDER 4 55000 40 a9059cbb000000000000000000000000710e94d7f8a5d7a1e5be52bd783370d6e3008a2a0000000000000000000000000000000000000000000000000000000005f5e100 af1ae4e29253ba755c723bca25e883b8deb777b8 OP_CALL",
				Hex: "01011481e872329e767a0487de7e970992b13b644f1f4f4c6c6b483045022100b83ef90bc808569fb00e29a0f6209d32c1795207c95a554c091401ac8fa8ab920220694b7ec801efd2facea2026d12e8eb5de7689c637f539a620f24c6da8fff235f0121021104b7672c2e08fe321f1bfaffc3768c2777adeedb857b4313ed9d2f15fc8ce4c4010403d8d600012844a9059cbb000000000000000000000000710e94d7f8a5d7a1e5be52bd783370d6e3008a2a0000000000000000000000000000000000000000000000000000000005f5e10014af1ae4e29253ba755c723bca25e883b8deb777b8c2",
			},
		}},
	}

	expected := "81e872329e767a0487de7e970992b13b644f1f4f"

	result, err := testData.GetOpSenderAddress()

	if err != nil {
		t.Fatal(err)
	}

	if string(result) != expected {
		t.Errorf(
			"error\n\n-----\n\nwant: %s\n\n-----\n\ngot: %s",
			expected,
			string(result),
		)
	}
}

// Also test if it works for OP_CREATE script
func TestGetOpSenderAddressWithOpCreate(t *testing.T) {

	testData := DecodedRawTransactionResponse{
		Vouts: []*DecodedRawTransactionOutV{{
			ScriptPubKey: DecodedRawTransactionScriptPubKey{
				ASM: "1 69b004ac2b3993bf2fdf56b02746a1f57997420d 6a4730440220780bd9116bc36405bedc19d58cafb6e1cbe776c44c558aba93c7ecd86fba08a40220072d475b177721c35fa2013377ab00a00a5eabacc09d001d95a39eb75eaeae0301210375870ec95337038109498653660971764cef604873bc29dd92773bd3baddc56e OP_SENDER 4 2500000 40 60806040526100106008600a610141565b61001e90633b9aca00610154565b60005534801561002d57600080fd5b50600080543382526001602052604090912055610173565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561009657816000190482111561007c5761007c610045565b8085161561008957918102915b93841c9390800290610060565b509250929050565b6000826100ad5750600161013b565b816100ba5750600061013b565b81600181146100d057600281146100da576100f6565b600191505061013b565b60ff8411156100eb576100eb610045565b50506001821b61013b565b5060208310610133831016604e8410600b8410161715610119575081810a61013b565b610123838361005b565b806000190482111561013757610137610045565b0290505b92915050565b600061014d838361009e565b9392505050565b600081600019048311821515161561016e5761016e610045565b500290565b6106e0806101826000396000f3fe6080604052600436106100855760003560e01c806306fdde0314610094578063095ea7b3146100de57806318160ddd1461010e57806323b872dd14610132578063313ce567146101525780635a3b7e421461017957806370a08231146101ae57806395d89b41146101db578063a9059cbb1461020a578063dd62ed3e1461022a57600080fd5b3661008f57600080fd5b600080fd5b3480156100a057600080fd5b506100c860405180604001604052806008815260200167145490c8151154d560c21b81525081565b6040516100d5919061050a565b60405180910390f35b3480156100ea57600080fd5b506100fe6100f936600461057b565b610262565b60405190151581526020016100d5565b34801561011a57600080fd5b5061012460005481565b6040519081526020016100d5565b34801561013e57600080fd5b506100fe61014d3660046105a5565b610315565b34801561015e57600080fd5b50610167600881565b60405160ff90911681526020016100d5565b34801561018557600080fd5b506100c860405180604001604052806009815260200168546f6b656e20302e3160b81b81525081565b3480156101ba57600080fd5b506101246101c93660046105e1565b60016020526000908152604090205481565b3480156101e757600080fd5b506100c86040518060400160405280600381526020016251544360e81b81525081565b34801561021657600080fd5b506100fe61022536600461057b565b61042d565b34801561023657600080fd5b506101246102453660046105fc565b600260209081526000928352604080842090915290825290205481565b6000826001600160a01b03811661027857600080fd5b8215806102a657503360009081526002602090815260408083206001600160a01b0388168452909152902054155b6102af57600080fd5b3360008181526002602090815260408083206001600160a01b03891680855290835292819020879055518681529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060019392505050565b6000836001600160a01b03811661032b57600080fd5b836001600160a01b03811661033f57600080fd5b6001600160a01b038616600090815260026020908152604080832033845290915290205461036d90856104c8565b6001600160a01b0387166000818152600260209081526040808320338452825280832094909455918152600190915220546103a890856104c8565b6001600160a01b0380881660009081526001602052604080822093909355908716815220546103d790856104eb565b6001600160a01b03808716600081815260016020526040908190209390935591519088169060008051602061068b833981519152906104199088815260200190565b60405180910390a350600195945050505050565b6000826001600160a01b03811661044357600080fd5b3360009081526001602052604090205461045d90846104c8565b33600090815260016020526040808220929092556001600160a01b0386168152205461048990846104eb565b6001600160a01b03851660008181526001602052604090819020929092559051339060008051602061068b833981519152906103039087815260200190565b6000818310156104da576104da61062f565b6104e4828461065b565b9392505050565b6000806104f88385610672565b9050838110156104e4576104e461062f565b600060208083528351808285015260005b818110156105375785810183015185820160400152820161051b565b81811115610549576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461057657600080fd5b919050565b6000806040838503121561058e57600080fd5b6105978361055f565b946020939093013593505050565b6000806000606084860312156105ba57600080fd5b6105c38461055f565b92506105d16020850161055f565b9150604084013590509250925092565b6000602082840312156105f357600080fd5b6104e48261055f565b6000806040838503121561060f57600080fd5b6106188361055f565b91506106266020840161055f565b90509250929050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561066d5761066d610645565b500390565b6000821982111561068557610685610645565b50019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212204f0b7715a86df24f99b5c5614a27135476c273daed593651ad8a700c8be258cd64736f6c634300080b0033 OP_CREATE",
			},
		}},
	}

	expected := "69b004ac2b3993bf2fdf56b02746a1f57997420d"

	result, err := testData.GetOpSenderAddress()

	if err != nil {
		t.Fatal(err)
	}

	if string(result) != expected {
		t.Errorf(
			"error\n\n-----\n\nwant: %s\n\n-----\n\ngot: %s",
			expected,
			string(result),
		)
	}
}

func TestExtractContractInfo(t *testing.T) {
	value, _ := decimal.NewFromString("1.89868837")
	testData := DecodedRawTransactionResponse{
		Vouts: []*DecodedRawTransactionOutV{
			{
				Value: value,
				N:     0,
				ScriptPubKey: DecodedRawTransactionScriptPubKey{
					ASM: "OP_DUP OP_HASH160 93594441cb5de8b497ad8467d55412c2a0ef3659 OP_EQUALVERIFY OP_CHECKSIG",
					Hex: "76a91493594441cb5de8b497ad8467d55412c2a0ef365988ac",
					Addresses: []string{
						"Qa36NrNdFgr4XeMxKdZeSZ1FGCdSNLmqXh",
					},
					Type: "pubkeyhash",
				},
			},
			{
				Value: decimal.Zero,
				N:     1,
				ScriptPubKey: DecodedRawTransactionScriptPubKey{
					ASM:       "1 93594441cb5de8b497ad8467d55412c2a0ef3659 6a4730440220396b30b7a2f2af482e585473b7575dd2f989f3f3d7cdee55fa34e93f23d5254d022055326cdcab38c58dc3e65c458bfb656cca8340f59534c00ad98b4d4d3303f459012103379c39b6fb2c705db608f98a8fc064f94c66faf894996ca88595487f9ef04a6e OP_SENDER 4 250000 40 -191784509 0000000000000000000000000000000000000086 OP_CALL",
					Hex:       "01011493594441cb5de8b497ad8467d55412c2a0ef36594c6b6a4730440220396b30b7a2f2af482e585473b7575dd2f989f3f3d7cdee55fa34e93f23d5254d022055326cdcab38c58dc3e65c458bfb656cca8340f59534c00ad98b4d4d3303f459012103379c39b6fb2c705db608f98a8fc064f94c66faf894996ca88595487f9ef04a6ec401040390d0030128043d666e8b140000000000000000000000000000000000000086c2",
					Addresses: []string{},
					Type:      "call_sender",
				},
			},
		},
	}

	expected := ContractInfo{
		From:      "93594441cb5de8b497ad8467d55412c2a0ef3659",
		To:        "0000000000000000000000000000000000000086",
		GasPrice:  "28",
		GasLimit:  "3d090",
		UserInput: "3d666e8b",
	}

	result, isContractTx, err := testData.ExtractContractInfo()

	if err != nil {
		t.Fatal(err)
	}

	if isContractTx == false {
		t.Errorf("error\n\n-----\n\nwant: %t\n\n-----\n\ngot: %t", true, isContractTx)
	}

	if !reflect.DeepEqual(result, expected) {
		t.Errorf(
			"error\n\n-----\n\nwant: %s\n\n-----\n\ngot: %s",
			expected,
			result,
		)
	}
}
